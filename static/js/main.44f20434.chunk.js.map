{"version":3,"sources":["lib/styles/palette.js","components/auth/AuthTemplate.jsx","components/common/Button.jsx","components/auth/AuthForm.jsx","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/auth.js","modules/auth.js","modules/user.js","container/auth/LoginForm.jsx","pages/LoginPage.jsx","components/common/Responsive.jsx","components/common/Header.jsx","container/common/HeaderContainer.jsx","components/posts/Pagination.jsx","container/posts/PaginationContainer.jsx","components/common/SubInfo.jsx","components/common/Tags.jsx","components/posts/PostList.jsx","modules/posts.js","lib/api/posts.js","container/posts/PostListContainer.jsx","pages/PostListPage.jsx","modules/post.js","components/post/PostViewer.jsx","components/common/AskModal.jsx","components/post/AskRemoveModal.jsx","components/post/PostActionButtons.jsx","modules/write.js","container/post/PostViewContainer.jsx","pages/PostPage.jsx","container/auth/RegisterForm.jsx","pages/RegisterPage.jsx","components/write/Editor.jsx","container/write/EditorContainer.jsx","components/write/TagBox.jsx","container/write/TagBoxContainer.jsx","components/write/WriteActionButtons.jsx","container/write/WriteActionButtonsContainer.jsx","pages/WritePage.jsx","App.jsx","modules/index.js","index.js"],"names":["palette","gray","cyan","AuthTemplateWrapper","styled","div","WhiteBox","AuthTemplate","children","className","to","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","textMap","login","register","ErrorMessage","AuthForm","type","form","onChange","onSubmit","error","text","autoComplete","name","placeholder","value","username","password","passwordConfirm","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","client","axios","create","logout","post","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","key","initializeForm","registerSaga","loginSaga","takeLatest","initalState","passwordContirm","auth","authError","produce","draft","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","user","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","checkError","LoginForm","history","useHistory","useState","setError","dispatch","useDispatch","useSelector","useEffect","push","setItem","JSON","stringify","target","preventDefault","LoginPage","ResponsiveWrapper","Responsive","rest","HeaderBlock","Wrapper","Spacer","UserInfo","Header","onLogout","onClick","HeaderContainer","PaginationWrapper","PageNumber","buildLink","tag","page","query","qs","Pagination","lastPage","disabled","undefined","withRouter","location","posts","parse","search","ignoreQueryPrefix","parseInt","SubInfoWrapper","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsWrapper","Tags","tags","map","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","listPostsSaga","queryString","headers","PostListPage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","id","unloadPost","readPostSaga","initailState","PostViewerWrapper","PostHead","PostContent","PostViewer","actionButtons","reponse","status","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","onCancel","AskRemoveModal","PostActionButtonsWrapper","ActionButton","PostActionButtons","onEdit","onRemove","modal","setModal","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","updatePost","writePostSaga","updatePostSaga","patch","initialState","postError","originalPostId","write","match","postId","params","a","delete","ownPost","PostPage","RegisterForm","includes","RegisterPage","EditorWrapper","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","ref","EditorContainer","dispath","useCallback","TagBoxWrapper","TagForm","Tag","TagListWrapper","TagItem","React","memo","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsWrapper","WriteActionButtons","onPublish","isEdit","WriteActionButtonsContainer","goBack","WritePage","App","path","exact","component","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById"],"mappings":"wPA4BeA,EA3BC,CACdC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,Y,OCfEC,EAAsBC,IAAOC,IAAV,iSAMTL,EAAQC,KAAK,IASvBK,EAAWF,IAAOC,IAAV,ySA4BCE,EAbM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OACE,cAACL,EAAD,UACE,eAACG,EAAD,WACE,qBAAKG,UAAU,YAAf,SACE,cAAC,IAAD,CAAMC,GAAG,IAAT,wBAEDF,Q,uBCzCHG,EAAcC,YAAH,gWASDZ,EAAQC,KAAK,GAEXD,EAAQC,KAAK,IAE3B,SAACY,GAAD,OACAA,EAAMC,WACNF,YADA,gJAOA,SAACC,GAAD,OACAA,EAAMX,MACNU,YADA,2GAEgBZ,EAAQE,KAAK,GAEXF,EAAQE,KAAK,MAIjBF,EAAQC,KAAK,GAClBD,EAAQC,KAAK,IAKpBc,EAAeX,IAAOY,OAAV,kCACdL,GAGEM,EAAab,YAAOc,IAAPd,CAAH,kCACZO,GAWWQ,EARA,SAACN,GACd,OAAOA,EAAMH,GACX,cAACO,EAAD,2BAAgBJ,GAAhB,IAAuBX,KAAMW,EAAMX,KAAO,EAAI,KAE9C,cAACa,EAAD,eAAkBF,KC3ChBO,EAAgBhB,IAAOC,IAAV,mGAGNL,EAAQC,KAAK,IAQpBoB,EAAcjB,IAAOkB,MAAV,kRAGYtB,EAAQC,KAAK,GAMXD,EAAQC,KAAK,IAUtCsB,EAASnB,IAAOC,IAAV,6KAICL,EAAQC,KAAK,GAGXD,EAAQC,KAAK,IAKtBuB,EAAsBpB,YAAOe,EAAPf,CAAH,iDAInBqB,EAAU,CACdC,MAAO,qBACPC,SAAU,4BAMNC,EAAexB,IAAOC,IAAV,+GAsDHwB,EA/CE,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC5CC,EAAOV,EAAQK,GACrB,OACE,eAACV,EAAD,WACE,6BAAKe,IACL,uBAAMF,SAAUA,EAAhB,UACE,cAACZ,EAAD,CACEe,aAAa,WACbC,KAAK,WACLC,YAAY,qBACZN,SAAUA,EACVO,MAAOR,EAAKS,WAEd,cAACnB,EAAD,CACEe,aAAa,eACbC,KAAK,WACLC,YAAY,2BACZR,KAAK,WACLE,SAAUA,EACVO,MAAOR,EAAKU,WAEJ,aAATX,GACC,cAACT,EAAD,CACEe,aAAa,eACbC,KAAK,kBACLC,YAAY,wCACZR,KAAK,WACLE,SAAUA,EACVO,MAAOR,EAAKW,kBAGfR,GAAS,cAACN,EAAD,UAAeM,IACzB,cAACV,EAAD,CAAqBtB,MAAI,EAACY,WAAS,EAAnC,SACGqB,OAGL,cAACZ,EAAD,UACY,UAATO,EACC,cAAC,IAAD,CAAMpB,GAAG,YAAT,sCAEA,cAAC,IAAD,CAAMA,GAAG,SAAT,sC,0DC7GJiC,EAAgB,wBAChBC,EAAiB,yBAIVC,EAAeC,YAC1BH,GACA,SAACI,GAAD,OAAiBA,KAGNC,EAAgBF,YAC3BF,GACA,SAACG,GAAD,OAAiBA,KAmBJE,GAdCC,aAAa,mBAExBP,GAAgB,SAACQ,EAAOC,GAAR,mBAAC,eACbD,GADY,kBAEdC,EAAOC,SAAU,OAJK,cAMxBT,GAAiB,SAACO,EAAOC,GAAR,mBAAC,eACdD,GADa,kBAEfC,EAAOC,SAAU,OARK,GAFR,ICdRC,GAA2B,SAACxB,GAGvC,MAAO,CAACA,EAFK,UAAMA,EAAN,YACA,UAAMA,EAAN,cAIA,SAASyB,GAAkBzB,EAAM0B,GAC9C,IAAMC,EAAO,UAAM3B,EAAN,YACP4B,EAAO,UAAM5B,EAAN,YAEb,iBAAO,WAAWsB,GAAX,uEACL,OADK,SACCO,YAAId,EAAaf,IADlB,OAGc,OAHd,kBAGoB8B,YAAKJ,EAASJ,EAAOC,SAHzC,OAIH,OADMQ,EAHH,gBAIGF,YAAI,CACR7B,KAAM2B,EACNJ,QAASQ,EAASC,KAClBC,KAAMF,IAPL,+BAUH,OAVG,oCAUGF,YAAI,CACR7B,KAAM4B,EACNL,QAAQ,EAAD,GACPnB,OAAO,IAbN,QAgBL,OAhBK,UAgBCyB,YAAIX,EAAclB,IAhBnB,yD,gBCWMkC,G,QAtBAC,EAAMC,SCYRC,GAAS,kBAAMH,GAAOI,KAAK,qB,YCwBvBC,IA7BXC,GAAe,oBACfC,GAAkB,uB,GAEtBjB,GAAyB,iB,qBADpBkB,G,MAAUC,G,MAAkBC,G,SAGjCpB,GAAyB,c,qBADpBqB,G,MAAOC,G,MAAeC,G,MAIhBC,GAAchC,YACzBwB,IACA,kBAA2B,CACzBvC,KADF,EAAGA,KAEDgD,IAFF,EAASA,IAGPxC,MAHF,EAAcA,UAMHyC,GAAiBlC,YAAayB,IAAiB,SAACxC,GAAD,OAAUA,KACzDJ,GAAWmB,YAAa0B,IAAU,kBAA6B,CAC1EhC,SAD6C,EAAGA,SAEhDC,SAF6C,EAAaA,aAI/Cf,GAAQoB,YAAa6B,IAAO,kBAA6B,CACpEnC,SADuC,EAAGA,SAE1CC,SAFuC,EAAaA,aAMhDwC,GAAe1B,GAAkBiB,ID7Bf,SAAC,GAAD,IAAGhC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAb,OACtBuB,GAAOI,KAAK,qBAAsB,CAAE5B,WAAUC,gBC6B1CyC,GAAY3B,GAAkBoB,IDlCf,SAAC,GAAD,IAAGnC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAb,OACnBuB,GAAOI,KAAK,kBAAmB,CAAE5B,WAAUC,gBCkCtC,SAAU4B,KAAV,iEACL,OADK,SACCc,YAAWX,GAAUS,IADtB,OAEL,OAFK,SAECE,YAAWR,GAAOO,IAFnB,wCAKP,I,GAAME,GAAc,CAClBzD,SAAU,CACRa,SAAU,GACVC,SAAU,GACV4C,gBAAiB,IAEnB3D,MAAO,CACLc,SAAU,GACVC,SAAU,IAEZ6C,KAAM,KACNC,UAAW,MAoCED,GAjCFpC,aAAa,kBAAC,GAEtBoB,IAAe,SAACnB,EAAD,WAAUE,QAAWtB,EAArB,EAAqBA,KAAMgD,EAA3B,EAA2BA,IAAKxC,EAAhC,EAAgCA,MAAhC,OACdiD,YAAQrC,GAAO,SAACsC,GACdA,EAAM1D,GAAMgD,GAAOxC,QAJD,YAAC,GAMtBgC,IAAkB,SAACpB,EAAD,SAAmBpB,EAAnB,EAAUsB,QAAV,mBAAC,eACfF,GADc,uBAEhBpB,EAAOqD,GAAYrD,IAFH,0BAGN,MAHM,OANG,YAAC,GAWtB0C,IAAmB,SAACtB,EAAD,OAAmBmC,EAAnB,EAAUjC,QAAV,mBAAC,eAChBF,GADe,IAElBoC,UAAW,KACXD,YAdoB,YAAC,GAgBtBZ,IAAmB,SAACvB,EAAD,OAAmBjB,EAAnB,EAAUmB,QAAV,mBAAC,eAChBF,GADe,IAElBoC,UAAWrD,OAlBS,YAAC,GAoBtB0C,IAAgB,SAACzB,EAAD,OAAmBmC,EAAnB,EAAUjC,QAAV,mBAAC,eACbF,GADY,IAEfoC,UAAW,KACXD,YAvBoB,YAAC,GAyBtBT,IAAgB,SAAC1B,EAAD,OAAmBjB,EAAnB,EAAUmB,QAAV,mBAAC,eACbF,GADY,IAEfoC,UAAWrD,OA3BS,IA8BxBkD,I,YC9DQM,I,YASOC,IA3BXC,GAAgB,qB,GAGpBtC,GAAyB,c,qBADpBuC,G,MAAOC,G,MAAeC,G,MAEvBC,GAAS,cAEFC,GAAcnD,YAAa8C,IAAe,SAACM,GAAD,OAAUA,KACpDC,GAAQrD,YAAa+C,IACrB1B,GAASrB,YAAakD,IAE7BI,GAAY7C,GAAkBsC,IFNf,kBAAM7B,GAAOqC,IAAI,sBEOtC,SAASC,KACP,IACEC,aAAaC,WAAW,QACxB,MAAOC,GACPC,QAAQC,IAAI,gCAGhB,SAAUjB,KAAV,iEAEI,OAFJ,kBAEU9B,YAAKgD,IAFf,OAGIL,aAAaC,WAAW,QAH5B,+CAKIE,QAAQC,IAAR,MALJ,qDASO,SAAUhB,KAAV,iEACL,OADK,SACCR,YAAWU,GAAOO,IADnB,OAEL,OAFK,SAECjB,YAAWY,GAAeO,IAF3B,OAGL,OAHK,SAGCnB,YAAWa,GAAQN,IAHpB,wCAMP,I,0CAKexC,gBAAa,kBAAC,GAExB0C,IAAgB,SAACzC,EAAD,OAAmB+C,EAAnB,EAAU7C,QAAV,mBAAC,eACbF,GADY,IAEf+C,YAJsB,YAAC,GAMxBJ,IAAgB,SAAC3C,EAAD,OAAmB+C,EAAnB,EAAU7C,QAAV,mBAAC,eACbF,GADY,IAEf+C,OACAW,WAAY,UATU,YAAC,GAWxBd,IAAgB,SAAC5C,EAAD,OAAmBjB,EAAnB,EAAUmB,QAAV,mBAAC,eACbF,GADY,IAEf+C,KAAM,KACNW,WAAY3E,OAdU,YAAC,GAgBxB8D,IAAS,SAAC7C,GAAD,mBAAC,eACNA,GADK,IAER+C,KAAM,UAlBgB,IALP,CACnBA,KAAM,KACNW,WAAY,OC+BCC,GAlEG,SAACjG,GACjB,IAAMkG,EAAUC,cADW,EAEDC,mBAAS,MAFR,mBAEpB/E,EAFoB,KAEbgF,EAFa,KAGrBC,EAAWC,cAHU,EAIaC,aAAY,gBAAG/B,EAAH,EAAGA,KAAMY,EAAT,EAASA,KAAT,MAAqB,CACvEnE,KAAMuD,EAAK5D,MACX4D,KAAMA,EAAKA,KACXC,UAAWD,EAAKC,UAChBW,KAAMA,EAAKA,SAJLnE,EAJmB,EAInBA,KAAMuD,EAJa,EAIbA,KAAMC,EAJO,EAIPA,UAAWW,EAJJ,EAIIA,KAmD/B,OA5BAoB,qBAAU,WACRH,EAASnC,GAAe,YACvB,CAACmC,IAGJG,qBAAU,WACJ/B,IACFmB,QAAQC,IAAI,4BACZD,QAAQC,IAAIpB,GACZ2B,EAAS,oCAEP5B,IACFoB,QAAQC,IAAI,mCACZQ,EAAShB,SAEV,CAACb,EAAMC,EAAW4B,IAGrBG,qBAAU,WACJpB,GACFa,EAAQQ,KAAK,KAEf,IACEhB,aAAaiB,QAAQ,OAAQC,KAAKC,UAAUxB,IAC5C,MAAOO,GACPC,QAAQC,IAAI,kCAEb,CAACT,EAAMa,IAER,cAAC,EAAD,CACEjF,KAAK,QACLC,KAAMA,EACNC,SAjDa,SAACyE,GAAO,IAAD,EACEA,EAAEkB,OAAlBpF,EADc,EACdA,MAAOF,EADO,EACPA,KACf8E,EACErC,GAAY,CACV/C,KAAM,QACNgD,IAAK1C,EACLE,YA4CFN,SAxCa,SAACwE,GAChBA,EAAEmB,iBADoB,IAEdpF,EAAuBT,EAAvBS,SAAUC,EAAaV,EAAbU,SAClB0E,EAASzF,GAAM,CAAEc,WAAUC,eAsCzBP,MAAOA,KCxDE2F,GARG,SAAChH,GACjB,OACE,cAAC,EAAD,UACE,cAAC,GAAD,O,SCJAiH,GAAoB1H,IAAOC,IAAV,uMAkBR0H,GAJI,SAAC,GAA2B,IAAzBvH,EAAwB,EAAxBA,SAAawH,EAAW,6BAC5C,OAAO,cAACF,GAAD,2BAAuBE,GAAvB,aAA8BxH,MCZjCyH,GAAc7H,IAAOC,IAAV,wIAUX6H,GAAU9H,YAAO2H,GAAP3H,CAAH,wYAmBP+H,GAAS/H,IAAOC,IAAV,+CAIN+H,GAAWhI,IAAOC,IAAV,0EA8BCgI,GAzBA,SAAC,GAAwB,IAAtBnC,EAAqB,EAArBA,KAAMoC,EAAe,EAAfA,SACtB,OACE,qCACE,cAACL,GAAD,UACE,eAACC,GAAD,WACE,cAAC,IAAD,CAAMxH,GAAG,IAAID,UAAU,OAAvB,sBAGCyF,EACC,sBAAKzF,UAAU,QAAf,UACE,cAAC2H,GAAD,UAAWlC,EAAK1D,WAChB,cAAC,EAAD,CAAQ+F,QAASD,EAAjB,yCAGF,qBAAK7H,UAAU,QAAf,SACE,cAAC,EAAD,CAAQC,GAAG,SAAX,uCAKR,cAACyH,GAAD,QCjDSK,GAVS,SAAC3H,GAAW,IAC1BqF,EAASmB,aAAY,kBAAe,CAAEnB,KAAjB,EAAGA,KAAyBA,SAAjDA,KACFiB,EAAWC,cAKjB,OAAO,cAAC,GAAD,CAAQlB,KAAMA,EAAMoC,SAJV,WACfnB,EAAShD,U,oBCJPsE,GAAoBrI,IAAOC,IAAV,+IAOjBqI,GAAatI,IAAOC,IAAV,4BAEVsI,GAAY,SAAC,GAA6B,IAA3BnG,EAA0B,EAA1BA,SAAUoG,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,KAC5BC,EAAQC,KAAGrB,UAAU,CAAEkB,MAAKC,SAClC,OAAOrG,EAAQ,YAAQA,EAAR,YAAoBsG,GAApB,YAAmCA,IA6BrCE,GA1BI,SAAC,GAAuC,IAArCH,EAAoC,EAApCA,KAAMI,EAA8B,EAA9BA,SAAUzG,EAAoB,EAApBA,SAAUoG,EAAU,EAAVA,IAC9C,OACE,eAACH,GAAD,WACE,cAAC,EAAD,CACES,SAAmB,IAATL,EACVnI,GACW,IAATmI,OAAaM,EAAYR,GAAU,CAAEnG,WAAUoG,MAAKC,KAAMA,EAAO,IAHrE,0BAQA,cAACH,GAAD,UAAaG,IACb,cAAC,EAAD,CACEK,SAAUL,IAASI,EACnBvI,GACEmI,IAASI,OACLE,EACAR,GAAU,CAAEnG,WAAUoG,MAAKC,KAAMA,EAAO,IALhD,8BCESO,gBA3Ba,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACPhC,aAAY,gBAAGiC,EAAH,EAAGA,MAAOrG,EAAV,EAAUA,QAAV,MAAyB,CACxEgG,SAAUK,EAAML,SAChBK,MAAOA,EAAMA,MACbrG,QAASA,EAAQ,wBAHXgG,EADoC,EACpCA,SAAUK,EAD0B,EAC1BA,MAAOrG,EADmB,EACnBA,QAMzB,IAAKqG,GAASrG,EAAS,OAAO,KAPc,MAaxC8F,KAAGQ,MAAMF,EAASG,OAAQ,CAC5BC,mBAAmB,IAJnBb,EAV0C,EAU1CA,IACApG,EAX0C,EAW1CA,SAX0C,IAY1CqG,YAZ0C,MAYnC,EAZmC,EAiB5C,OACE,cAAC,GAAD,CACED,IAAKA,EACLpG,SAAUA,EACVqG,KAAMa,SAASb,EAAM,IACrBI,SAAUA,OCvBVU,GAAiBvJ,IAAOC,IAAV,mmBAChB,SAACQ,GAAD,OACAA,EAAM+I,cACNhJ,YADA,6DAIOZ,EAAQC,KAAK,GAGXD,EAAQC,KAAK,IAoBX4J,GAbC,SAAC,GAA+C,IAA7CrH,EAA4C,EAA5CA,SAAUsH,EAAkC,EAAlCA,cAAeF,EAAmB,EAAnBA,aAC1C,OACE,eAACD,GAAD,CAAgBC,aAAcA,EAA9B,UACE,+BACE,4BACE,cAAC,IAAD,CAAMlJ,GAAE,YAAO8B,GAAf,SAA4BA,QAGhC,+BAAO,IAAIuH,KAAKD,GAAeE,2BCxB/BC,GAAc7J,IAAOC,IAAV,gNAIJL,EAAQE,KAAK,GAIXF,EAAQE,KAAK,IAiBbgK,GAZF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,cAACF,GAAD,UACGE,EAAKC,KAAI,SAACxB,GAAD,OACR,eAAC,IAAD,CAAMnI,UAAU,MAAMC,GAAE,gBAAWkI,GAAnC,cACIA,IAD2CA,SCbjDyB,GAAgBjK,YAAO2H,GAAP3H,CAAH,mDAIbkK,GAAyBlK,IAAOC,IAAV,sGAMtBkK,GAAgBnK,IAAOC,IAAV,4YAQSL,EAAQC,KAAK,GAO1BD,EAAQC,KAAK,IAQtBuK,GAAW,SAAC,GAAc,IAAZpG,EAAW,EAAXA,KACV0F,EAAgD1F,EAAhD0F,cAAe5D,EAAiC9B,EAAjC8B,KAAMiE,EAA2B/F,EAA3B+F,KAAMM,EAAqBrG,EAArBqG,MAAOC,EAActG,EAAdsG,KAAMC,EAAQvG,EAARuG,IAChD,OACE,eAACJ,GAAD,WACE,6BACE,cAAC,IAAD,CAAM7J,GAAE,YAAOwF,EAAK1D,SAAZ,YAAwBmI,GAAhC,SAAwCF,MAE1C,cAAC,GAAD,CACEjI,SAAU0D,EAAK1D,SACfsH,cAAe,IAAIC,KAAKD,KAE1B,cAAC,GAAD,CAAMK,KAAMA,IACZ,4BAAIO,QAgCKE,GA3BE,SAAC,GAAgD,IAA9CtB,EAA6C,EAA7CA,MAAOrG,EAAsC,EAAtCA,QAASf,EAA6B,EAA7BA,MAAO2I,EAAsB,EAAtBA,gBAEzC,OAAI3I,EACK,cAACmI,GAAD,uEAIP,eAACA,GAAD,WACE,cAACC,GAAD,UACGO,GACC,cAAC,EAAD,CAAQ3K,MAAI,EAACQ,GAAG,SAAhB,uDAMFuC,GAAWqG,GACX,8BACGA,EAAMc,KAAI,SAAChG,GAAD,OACT,cAAC,GAAD,CAAUA,KAAMA,GAAWA,EAAKuG,c,YC9D3BG,I,GARfxH,GAAyB,oB,qBADpByH,G,MAAYC,G,MAAoBC,G,MAG1BC,GAAYpI,YACvBiI,IACA,kBAA8B,CAAEnC,IAAhC,EAAGA,IAAkCpG,SAArC,EAAQA,SAAuCqG,KAA/C,EAAkBA,SAGdsC,GAAgB5H,GAAkBwH,ICPf,SAAC,GAA6B,IAA3BlC,EAA0B,EAA1BA,KAAMrG,EAAoB,EAApBA,SAAUoG,EAAU,EAAVA,IACpCwC,EAAcrC,KAAGrB,UAAU,CAC/BmB,OACArG,WACAoG,QAEF,OAAO5E,GAAOqC,IAAP,qBAAyB+E,ODE3B,SAAUN,KAAV,iEACL,OADK,SACC3F,YAAW4F,GAAYI,IADxB,wCAIP,I,GAqBe7B,GAfDpG,aAAa,kBAAC,GAEvB8H,IAAqB,SAAC7H,EAAD,OAAmBmG,EAAnB,EAAUjG,QAAsBQ,EAAhC,EAA0BE,KAA1B,mBAAC,eAClBZ,GADiB,IAEpBmG,QACAL,SAAUS,SAAS7F,EAASwH,QAAQ,aAAc,SAL7B,YAAC,GAOvBJ,IAAqB,SAAC9H,EAAD,OAAmBjB,EAAnB,EAAUmB,QAAV,mBAAC,eAClBF,GADiB,IAEpBjB,aATqB,IANN,CACnBoH,MAAO,KACPpH,MAAO,KACP+G,SAAU,IEWGG,gBA3BW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrBlC,EAAWC,cADyB,EAEFC,aACtC,gBAAGiC,EAAH,EAAGA,MAAOrG,EAAV,EAAUA,QAASiD,EAAnB,EAAmBA,KAAnB,MAA+B,CAC7BoD,MAAOA,EAAMA,MACbpH,MAAOoH,EAAMpH,MACbe,QAASA,EAAQ,oBACjBiD,KAAMA,EAAKA,SALPoD,EAFkC,EAElCA,MAAOpH,EAF2B,EAE3BA,MAAOe,EAFoB,EAEpBA,QAASiD,EAFW,EAEXA,KAe/B,OAPAoB,qBAAU,WAAO,IAAD,EACkByB,KAAGQ,MAAMF,EAASG,OAAQ,CACxDC,mBAAmB,IADbb,EADM,EACNA,IAAKpG,EADC,EACDA,SAAUqG,EADT,EACSA,KAGvB1B,EAAS+D,GAAU,CAAEtC,MAAKpG,WAAUqG,YACnC,CAAC1B,EAAUkC,EAASG,SAGrB,cAAC,GAAD,CACEvG,QAASA,EACTf,MAAOA,EACPoH,MAAOA,EACPuB,gBAAiB3E,OCdRoF,GAVM,SAACzK,GACpB,OACE,qCACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,Q,qBCKW0K,I,GAPfjI,GAAyB,kB,qBADpBkI,G,MAAWC,G,MAAmBC,G,MAE/BC,GAAc,mBAEPC,GAAW9I,YAAa0I,IAAW,SAACK,GAAD,OAAQA,KAC3CC,GAAahJ,YAAa6I,IAEjCI,GAAexI,GAAkBiI,IHRf,SAACK,GAAD,OAAQ7H,GAAOqC,IAAP,qBAAyBwF,OGSlD,SAAUN,KAAV,iEACL,OADK,SACCpG,YAAWqG,GAAWO,IADvB,wCAIP,I,2BAAMC,GAAe,CACnB5H,KAAM,KACNlC,MAAO,MAGMgB,gBAAa,kBAAC,GAExBuI,IAAoB,SAACtI,EAAD,OAAmBiB,EAAnB,EAAUf,QAAV,mBAAC,eACjBF,GADgB,IAEnBiB,YAJsB,YAAC,GAMxBsH,IAAoB,SAACvI,EAAD,OAAmBjB,EAAnB,EAAUmB,QAAV,mBAAC,eACjBF,GADgB,IAEnBjB,aARsB,YAAC,GAWxByJ,IAAc,kBAAMK,MAXG,IAa1BA,IC1BIC,GAAoB7L,YAAO2H,GAAP3H,CAAH,mDAIjB8L,GAAW9L,IAAOC,IAAV,yLACeL,EAAQC,KAAK,IAUpCkM,GAAc/L,IAAOC,IAAV,qEAENL,EAAQC,KAAK,IAkCTmM,GA/BI,SAAC,GAA6C,IAA3ChI,EAA0C,EAA1CA,KAAMlC,EAAoC,EAApCA,MAAOe,EAA6B,EAA7BA,QAASoJ,EAAoB,EAApBA,cAC1C,GAAInK,EACF,OAAIA,EAAM2B,UAAqC,MAAzB3B,EAAMoK,QAAQC,OAC3B,cAACN,GAAD,0FAEF,cAACA,GAAD,yCAGT,GAAIhJ,IAAYmB,EACd,OAAO,KATqD,IAYtDqG,EAA2CrG,EAA3CqG,MAAOC,EAAoCtG,EAApCsG,KAAMxE,EAA8B9B,EAA9B8B,KAAM4D,EAAwB1F,EAAxB0F,cAAeK,EAAS/F,EAAT+F,KAE1C,OACE,eAAC8B,GAAD,WACE,eAACC,GAAD,WACE,6BAAKzB,IACL,cAAC,GAAD,CACEjI,SAAU0D,EAAK1D,SACfsH,cAAeA,EACfF,cAAY,IAEd,cAAC,GAAD,CAAMO,KAAMA,OAEbkC,EACD,cAACF,GAAD,CAAaK,wBAAyB,CAAEC,OAAQ/B,SCrDhDgC,GAAatM,IAAOC,IAAV,oOAYVsM,GAAgBvM,IAAOC,IAAV,yUAmBbU,GAAeX,YAAOe,EAAPf,CAAH,0FAiCHwM,GA1BE,SAAC,GAQX,IAPLC,EAOI,EAPJA,QACApC,EAMI,EANJA,MACAqC,EAKI,EALJA,YAKI,IAJJC,mBAII,MAJU,eAIV,MAHJC,kBAGI,MAHS,eAGT,EAFJC,EAEI,EAFJA,UACAC,EACI,EADJA,SAEA,OAAKL,EAEH,cAACH,GAAD,UACE,eAACC,GAAD,WACE,6BAAKlC,IACL,4BAAIqC,IACJ,sBAAKrM,UAAU,UAAf,UACE,cAAC,GAAD,CAAc8H,QAAS2E,EAAvB,SAAkCF,IAClC,cAAC,GAAD,CAAc9M,MAAI,EAACqI,QAAS0E,EAA5B,SACGF,YATU,MCnCRI,GAbQ,SAAC,GAAsC,IAApCN,EAAmC,EAAnCA,QAASI,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAC5C,OACE,cAAC,GAAD,CACEL,QAASA,EACTpC,MAAM,kCACNqC,YAAY,0FACZC,YAAY,eACZE,UAAWA,EACXC,SAAUA,KCNVE,GAA2BhN,IAAOC,IAAV,8HAOxBgN,GAAejN,IAAOY,OAAV,wSAGPhB,EAAQC,KAAK,GAOND,EAAQC,KAAK,GAClBD,EAAQE,KAAK,IAmCXoN,GA5BW,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAAe,EACxBvG,oBAAS,GADe,mBAC3CwG,EAD2C,KACpCC,EADoC,KAalD,OACE,qCACE,eAACN,GAAD,WACE,cAACC,GAAD,CAAc9E,QAASgF,EAAvB,0BACA,cAACF,GAAD,CAAc9E,QAfE,WACpBmF,GAAS,IAcL,6BAEF,cAAC,GAAD,CACEb,QAASY,EACTR,UAbY,WAChBS,GAAS,GACTF,KAYIN,SAjBW,WACfQ,GAAS,U,YCIIC,IAjCXC,GAAa,mBACbtJ,GAAe,qB,GAEnBhB,GAAyB,oB,qBADpBuK,G,MAAYC,G,MAAoBC,G,MAEjCC,GAAoB,0B,GAExB1K,GAAyB,qB,qBADpB2K,G,MAAaC,G,MAAqBC,G,MAG5BC,GAAatL,YAAa8K,IAC1B9I,GAAchC,YAAawB,IAAc,kBAAqB,CACzES,IADoD,EAAGA,IAEvDxC,MAFoD,EAAQA,UAIjD8L,GAAYvL,YAAa+K,IAAY,kBAA4B,CAC5EpD,MADgD,EAAGA,MAEnDC,KAFgD,EAAUA,KAG1DP,KAHgD,EAAgBA,SAKrDmE,GAAkBxL,YAAakL,IAAmB,SAAC5J,GAAD,OAAUA,KAC5DmK,GAAazL,YACxBmL,IACA,kBAAgC,CAC9BpC,GADF,EAAGA,GAEDpB,MAFF,EAAOA,MAGLC,KAHF,EAAcA,KAIZP,KAJF,EAAoBA,SAShBqE,GAAgBjL,GAAkBsK,IRlCf,SAAC,GAAD,IAAGpD,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMP,EAAhB,EAAgBA,KAAhB,OACvBnG,GAAOI,KAAK,aAAc,CAAEqG,QAAOC,OAAMP,YQkCrCsE,GAAiBlL,GAAkB0K,IRrBf,SAAC,GAAD,IAAGpC,EAAH,EAAGA,GAAIpB,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAMP,EAApB,EAAoBA,KAApB,OACxBnG,GAAO0K,MAAP,qBAA2B7C,GAAM,CAC/BpB,QACAC,OACAP,YQmBG,SAAUwD,KAAV,iEACL,OADK,SACCxI,YAAW0I,GAAYW,IADxB,OAEL,OAFK,SAECrJ,YAAW8I,GAAaQ,IAFzB,wCAKP,I,2BAAME,GAAe,CACnBlE,MAAO,GACPC,KAAM,GACNP,KAAM,GACN/F,KAAM,KACNwK,UAAW,KACXC,eAAgB,MA6CHC,GA1CD5L,aAAa,kBAAC,GAEvB0K,IAAa,SAACzK,GAAD,OAAWwL,MAFF,YAAC,GAGvBrK,IAAe,SAACnB,EAAD,WAAUE,QAAW0B,EAArB,EAAqBA,IAAKxC,EAA1B,EAA0BA,MAA1B,mBAAC,eACZY,GADW,kBAEb4B,EAAMxC,OALc,YAAC,GAOvBsL,IAAa,SAAC1K,GAAD,mBAAC,eACVA,GADS,IAGZiB,KAAM,KACNwK,UAAW,UAXU,YAAC,GAcvBd,IAAqB,SAAC3K,EAAD,OAAmBiB,EAAnB,EAAUf,QAAV,mBAAC,eAClBF,GADiB,IAEpBiB,YAhBqB,YAAC,GAmBvB2J,IAAqB,SAAC5K,EAAD,OAAmByL,EAAnB,EAAUvL,QAAV,mBAAC,eAClBF,GADiB,IAEpByL,iBArBqB,YAAC,GAuBvBZ,IAAoB,SAAC7K,EAAD,OAAmBiB,EAAnB,EAAUf,QAAV,mBAAC,eACjBF,GADgB,IAEnBsH,MAAOrG,EAAKqG,MACZC,KAAMtG,EAAKsG,KACXP,KAAM/F,EAAK+F,KACX0E,eAAgBzK,EAAKuG,SA5BA,YAAC,GA8BvBuD,IAAsB,SAAC/K,EAAD,OAAmBiB,EAAnB,EAAUf,QAAV,mBAAC,eACnBF,GADkB,IAErBiB,YAhCqB,YAAC,GAkCvB+J,IAAsB,SAAChL,EAAD,OAAmByL,EAAnB,EAAUvL,QAAV,mBAAC,eACnBF,GADkB,IAErByL,iBApCqB,IAuCzBD,ICnCavF,gBAjDa,SAAC,GAAwB,IAAtB2F,EAAqB,EAArBA,MAAOhI,EAAc,EAAdA,QAE5BiI,EAAWD,EAAME,OAAjBD,OACF7H,EAAWC,cAHiC,EAIXC,aACrC,gBAAGjD,EAAH,EAAGA,KAAMnB,EAAT,EAASA,QAASiD,EAAlB,EAAkBA,KAAlB,MAA8B,CAC5B9B,KAAMA,EAAKA,KACXlC,MAAOkC,EAAKlC,MACZe,QAASA,EAAQ,kBACjBiD,KAAMA,EAAKA,SALP9B,EAJ0C,EAI1CA,KAAMlC,EAJoC,EAIpCA,MAAOe,EAJ6B,EAI7BA,QAASiD,EAJoB,EAIpBA,KAS9BoB,qBAAU,WAGR,OAFAH,EAASyE,GAASoD,IAEX,WACL7H,EAAS2E,SAEV,CAAC3E,EAAU6H,IAEd,IAKMxB,EAAQ,wCAAG,sBAAA0B,EAAA,+ETXQrD,ESaJmD,ETbWhL,GAAOmL,OAAP,qBAA4BtD,ISW3C,OAGb9E,EAAQQ,KAAK,KAHA,+CAKbb,QAAQC,IAAR,MALa,iCTXO,IAACkF,ISWR,oBAAH,qDASRuD,GAAWlJ,GAAQA,EAAKyE,QAAUvG,GAAQA,EAAK8B,KAAKyE,KAE1D,OACE,cAAC,GAAD,CACEvG,KAAMA,EACNnB,QAASA,EACTf,MAAOA,EACPmK,cACE+C,GAAW,cAAC,GAAD,CAAmB7B,OAtBrB,WACbpG,EAASmH,GAAgBlK,IACzB2C,EAAQQ,KAAK,WAoBqCiG,SAAUA,SCvCjD6B,GATE,WACf,OACE,qCACE,cAAC,GAAD,IACA,cAAC,GAAD,QCkFSC,GAnFM,SAACzO,GACpB,IAAMkG,EAAUC,cADc,EAEJC,mBAAS,MAFL,mBAEvB/E,EAFuB,KAEhBgF,EAFgB,KAGxBC,EAAWC,cAHa,EAIUC,aAAY,gBAAG/B,EAAH,EAAGA,KAAMY,EAAT,EAASA,KAAT,MAAqB,CACvEnE,KAAMuD,EAAK3D,SACX2D,KAAMA,EAAKA,KACXC,UAAWD,EAAKC,UAChBW,KAAMA,EAAKA,SAJLnE,EAJsB,EAItBA,KAAMuD,EAJgB,EAIhBA,KAAMC,EAJU,EAIVA,UAAWW,EAJD,EAICA,KAoE/B,OAjCAoB,qBAAU,WACRH,EAASnC,GAAe,eACvB,CAACmC,IAGJG,qBAAU,WACR,GAAI/B,EACF,OAAkC,MAA9BA,EAAU1B,SAAS0I,YACrBrF,EAAS,oFAGXA,EAAS,yCAGP5B,IACFoB,QAAQC,IAAI,yCACZD,QAAQC,IAAIrB,GACZ6B,EAAShB,SAEV,CAACb,EAAMC,EAAW4B,IAGrBG,qBAAU,WACJpB,GACFa,EAAQQ,KAAK,KAEf,IACEhB,aAAaiB,QAAQ,OAAQC,KAAKC,UAAUxB,IAC5C,MAAOO,GACPC,QAAQC,IAAI,kCAEb,CAACT,EAAMa,IAGR,cAAC,EAAD,CACEjF,KAAK,WACLC,KAAMA,EACNC,SAlEa,SAACyE,GAAO,IAAD,EACEA,EAAEkB,OAAlBpF,EADc,EACdA,MAAOF,EADO,EACPA,KACf8E,EACErC,GAAY,CACV/C,KAAM,WACNgD,IAAK1C,EACLE,YA6DFN,SAvDa,SAACwE,GAChBA,EAAEmB,iBADoB,IAEdpF,EAAwCT,EAAxCS,SAAUC,EAA8BV,EAA9BU,SAAUC,EAAoBX,EAApBW,gBAC5B,IAAI,CAACF,EAAUC,EAAUC,GAAiB6M,SAAS,IAInD,OAAI9M,IAAaC,GACfwE,EAAS,qFACTpC,GAAY,CAAE/C,KAAM,WAAYgD,IAAK,WAAYxC,MAAO,UACxDuC,GAAY,CAAE/C,KAAM,WAAYgD,IAAK,kBAAmBxC,MAAO,WAGjE4E,EAASxF,GAAS,CAAEa,WAAUC,cAT5ByE,EAAS,oEAoDThF,MAAOA,KCzEEsN,GARM,SAAC3O,GACpB,OACE,cAAC,EAAD,UACE,cAAC,GAAD,O,oBCAA4O,I,OAAgBrP,YAAO2H,GAAP3H,CAAH,mDAGbsP,GAAatP,IAAOkB,MAAV,wLAKatB,EAAQC,KAAK,IAIpC0P,GAAevP,IAAOC,IAAV,+QAiEHuP,GApDA,SAAC,GAAoC,IAAlCnF,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,KAAMmF,EAAoB,EAApBA,cACvBC,EAAeC,iBAAO,MACtBC,EAAgBD,iBAAO,MAE7BzI,qBAAU,WACR0I,EAAcC,QAAU,IAAIC,KAAMJ,EAAaG,QAAS,CACtDE,MAAO,SACP7N,YAAa,uDACb8N,QAAS,CAGPC,QAAS,CACP,CAAC,CAAEC,OAAQ,KAAO,CAAEA,OAAQ,MAC5B,CAAC,OAAQ,SAAU,YAAa,UAChC,CAAC,CAAEC,KAAM,WAAa,CAAEA,KAAM,WAC9B,CAAC,aAAc,aAAc,OAAQ,aAO3C,IAAMC,EAAQR,EAAcC,QAC5BO,EAAMC,GAAG,eAAe,SAACC,EAAOC,EAAUC,GACzB,SAAXA,GACFf,EAAc,CAAE9K,IAAK,OAAQxC,MAAOiO,EAAMK,KAAKC,iBAGlD,CAACjB,IAEJvI,qBAAU,WACR0I,EAAcC,QAAQY,KAAKC,UAAYpG,IACtC,IAMH,OACE,eAAC+E,GAAD,WACE,cAACC,GAAD,CACEpN,YAAY,oDACZN,SARgB,SAACyE,GACrBoJ,EAAc,CAAE9K,IAAK,QAASxC,MAAOkE,EAAEkB,OAAOpF,SAQ1CA,MAAOkI,IAET,cAACkF,GAAD,UACE,qBAAKoB,IAAKjB,UCpDHkB,GArBS,SAACnQ,GACvB,IAAMoQ,EAAU7J,cADiB,EAETC,aAAY,gBAAGyH,EAAH,EAAGA,MAAH,MAAgB,CAClDrE,MAAOqE,EAAMrE,MACbC,KAAMoE,EAAMpE,SAFND,EAFyB,EAEzBA,MAAOC,EAFkB,EAElBA,KAKTmF,EAAgBqB,uBACpB,SAAC7N,GAAD,OAAa4N,EAAQnM,GAAYzB,MACjC,CAAC4N,IASH,OANA3J,qBAAU,WACR,OAAO,WACL2J,EAAQ7C,SAET,CAAC6C,IAEG,cAAC,GAAD,CAAQpB,cAAeA,EAAepF,MAAOA,EAAOC,KAAMA,K,SCf7DyG,GAAgB/Q,IAAOC,IAAV,iLAEOL,EAAQC,KAAK,GAI1BD,EAAQC,KAAK,IAMpBmR,GAAUhR,IAAO2B,KAAV,qdAKS/B,EAAQC,KAAK,GAiBjBD,EAAQC,KAAK,GAIXD,EAAQC,KAAK,IAK3BoR,GAAMjR,IAAOC,IAAV,8HAEEL,EAAQC,KAAK,IAOlBqR,GAAiBlR,IAAOC,IAAV,uEAKdkR,GAAUC,IAAMC,MAAK,gBAAG7I,EAAH,EAAGA,IAAK4E,EAAR,EAAQA,SAAR,OACzB,eAAC6D,GAAD,CAAK9I,QAAS,kBAAMiF,EAAS5E,IAA7B,cAAqCA,QAGjC8I,GAAUF,IAAMC,MAAK,gBAAGtH,EAAH,EAAGA,KAAMqD,EAAT,EAASA,SAAT,OACzB,cAAC8D,GAAD,UACGnH,EAAKC,KAAI,SAACxB,GAAD,OACR,cAAC2I,GAAD,CAAmB3I,IAAKA,EAAK4E,SAAUA,GAAzB5E,WA6DL+I,GAxDA,SAAC,GAA4B,IAA1BxH,EAAyB,EAAzBA,KAAMyH,EAAmB,EAAnBA,aAAmB,EACf3K,mBAAS,IADM,mBAClC3F,EADkC,KAC3BuQ,EAD2B,OAEP5K,mBAAS,IAFF,mBAElC6K,EAFkC,KAEvBC,EAFuB,KAInCC,EAAYd,uBAChB,SAACtI,GACC,GAAKA,IACDkJ,EAAUvC,SAAS3G,GAAvB,CACA,IAAMqJ,EAAQ,uBAAOH,GAAP,CAAkBlJ,IAChCmJ,EAAaE,GACbL,EAAaK,MAEf,CAACH,EAAWF,IAGRpE,EAAW0D,uBACf,SAACtI,GACC,IAAMqJ,EAAWH,EAAUI,QAAO,SAACC,GAAD,OAAOA,IAAMvJ,KAC/CmJ,EAAaE,GACbL,EAAaK,KAEf,CAACH,EAAWF,IAGR5P,EAAWkP,uBAAY,SAACzK,GAC5BoL,EAASpL,EAAEkB,OAAOpF,SACjB,IAEGN,EAAWiP,uBACf,SAACzK,GACCA,EAAEmB,iBACFoK,EAAU1Q,EAAM8Q,QAChBP,EAAS,MAEX,CAACvQ,EAAO0Q,IAOV,OAJA1K,qBAAU,WACRyK,EAAa5H,KACZ,CAACA,IAGF,eAACgH,GAAD,WACE,eAACC,GAAD,CAASnP,SAAUA,EAAnB,UACE,uBACEK,YAAY,oDACZC,MAAOjB,EACPU,SAAUA,IAEZ,wBAAQF,KAAK,SAAb,6BAEF,cAAC4P,GAAD,CAASvH,KAAM2H,EAAWtE,SAAUA,QC3G3B6E,GAhBS,SAACxR,GACvB,IAAMsG,EAAWC,cACX+C,EAAO9C,aAAY,SAAClE,GAAD,OAAWA,EAAM2L,MAAM3E,QAWhD,OAAO,cAAC,GAAD,CAAQyH,aATM,SAACK,GACpB9K,EACErC,GAAY,CACVC,IAAK,OACLxC,MAAO0P,MAK8B9H,KAAMA,KCV7CmI,GAA4BlS,IAAOC,IAAV,+HAQzBU,GAAeX,YAAOe,EAAPf,CAAH,6FAkBHmS,GAXY,SAAC,GAAqC,IAAnCrF,EAAkC,EAAlCA,SAAUsF,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OACjD,OACE,eAACH,GAAD,WACE,eAAC,GAAD,CAAcpS,MAAI,EAACqI,QAASiK,EAA5B,gCACOC,EAAS,eAAO,kBAEvB,cAAC,GAAD,CAAclK,QAAS2E,EAAvB,8BC8BSwF,GArDqB,WAClC,IAAMvL,EAAWC,cACXL,EAAUC,cAFwB,EAGuBK,aAC7D,gBAAGyH,EAAH,EAAGA,MAAH,MAAgB,CACdrE,MAAOqE,EAAMrE,MACbC,KAAMoE,EAAMpE,KACZP,KAAM2E,EAAM3E,KACZ/F,KAAM0K,EAAM1K,KACZwK,UAAWE,EAAMF,UACjBC,eAAgBC,EAAMD,mBAPlBpE,EAHgC,EAGhCA,MAAOC,EAHyB,EAGzBA,KAAMP,EAHmB,EAGnBA,KAAM/F,EAHa,EAGbA,KAAMwK,EAHO,EAGPA,UAAWC,EAHJ,EAGIA,eAyC5C,OATAvH,qBAAU,WACR,GAAIlD,EAAM,CAAC,IACDuG,EAAcvG,EAAduG,IAAKzE,EAAS9B,EAAT8B,KACba,EAAQQ,KAAR,YAAkBrB,EAAK1D,SAAvB,YAAmCmI,IAEjCiE,GACFlI,QAAQC,IAAIiI,KAEb,CAAC7H,EAAS3C,EAAMwK,IAEjB,cAAC,GAAD,CACE4D,UA/Bc,WAEdrL,EADE0H,EACON,GAAW,CAAE9D,QAAOC,OAAMP,OAAM0B,GAAIgD,IAI7CR,GAAU,CACR5D,QACAC,OACAP,WAuBF+C,SAjBa,WACfnG,EAAQ4L,UAiBNF,OAAQ5D,KCtCC+D,GAVG,SAAC/R,GACjB,OACE,eAAC,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,QCSSgS,OAZf,WACE,OACE,qCACE,cAAC,IAAD,CAAOC,KAAM,CAAC,cAAe,KAAMC,OAAK,EAACC,UAAW1H,KACpD,cAAC,IAAD,CAAOwH,KAAK,SAASE,UAAWnL,KAChC,cAAC,IAAD,CAAOiL,KAAK,YAAYE,UAAWxD,KACnC,cAAC,IAAD,CAAOsD,KAAK,SAASE,UAAWJ,KAChC,cAAC,IAAD,CAAOE,KAAK,sBAAsBE,UAAW3D,S,qBCGlC4D,IAAV,SAAUA,KAAV,iEACL,OADK,SACCC,YAAI,CAAC7O,KAAYsB,KAAYgI,KAAapC,KAAYT,OADvD,wCAIQqI,OAbKC,2BAAgB,CAClC9N,QACArC,WACAiD,QACA4I,SACA1K,QACAkF,W,2BCFI+J,GAAiBC,eACjBC,GAAQC,uBACZL,GACAM,+BAAoBC,2BAAgBL,MAetCA,GAAeM,IAAIV,IAZnB,WACE,IACE,IAAM/M,EAAOK,aAAaqN,QAAQ,QAClC,IAAK1N,EAAM,OAEXqN,GAAMpM,SAASlB,GAAYC,IAC3BqN,GAAMpM,SAAShB,MACf,MAAOM,GACPC,QAAQC,IAAI,gCAKhBkN,GAEAC,IAASC,OACP,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SACE,cAAC,IAAD,UACE,cAAC,KAAD,UACE,cAAC,GAAD,UAINS,SAASC,eAAe,U","file":"static/js/main.44f20434.chunk.js","sourcesContent":["// source: https://yeun.github.io/open-color/\nconst palette = {\n  gray: [\n    '#f8f9fa',\n    '#f1f3f5',\n    '#e9ecef',\n    '#dee2e6',\n    '#ced4da',\n    '#adb5bd',\n    '#868e96',\n    '#495057',\n    '#343a40',\n    '#212529',\n  ],\n  cyan: [\n    '#e3fafc',\n    '#c5f6fa',\n    '#99e9f2',\n    '#66d9e8',\n    '#3bc9db',\n    '#22b8cf',\n    '#15aabf',\n    '#1098ad',\n    '#0c8599',\n    '#0b7285',\n  ],\n};\n\nexport default palette;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\n/**\n * 회원가입 / 로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\n */\n\nconst AuthTemplateWrapper = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  background: ${palette.gray[2]};\n  /* flex로 내부 내용 중앙 정렬 */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\n/* 흰색 박스 */\nconst WhiteBox = styled.div`\n  .logo-area {\n    display: block;\n    padding-bottom: 2rem;\n    text-align: center;\n    font-weight: bold;\n    letter-spacing: 2px;\n  }\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\n  padding: 2rem;\n  width: 360px;\n  background: white;\n  border-radius: 2px;\n`;\n\nconst AuthTemplate = ({ children }) => {\n  return (\n    <AuthTemplateWrapper>\n      <WhiteBox>\n        <div className=\"logo-area\">\n          <Link to=\"/\">REACTERS</Link>\n        </div>\n        {children}\n      </WhiteBox>\n    </AuthTemplateWrapper>\n  );\n};\n\nexport default AuthTemplate;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst buttonStyle = css`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n  cursor: pointer;\n  background: ${palette.gray[8]};\n  &:hover {\n    background: ${palette.gray[6]};\n  }\n  ${(props) =>\n    props.fullWidth &&\n    css`\n      padding-top: 0.75rem;\n      padding-bottom: 0.75rem;\n      width: 100%;\n      font-size: 1.125rem;\n    `}\n  ${(props) =>\n    props.cyan &&\n    css`\n      background: ${palette.cyan[5]};\n      &:hover {\n        background: ${palette.cyan[4]};\n      }\n    `}\n    &:disabled {\n    background: ${palette.gray[3]};\n    color: ${palette.gray[5]};\n    cursor: not-allowed;\n  }\n`;\n\nconst StyledButton = styled.button`\n  ${buttonStyle}\n`;\n\nconst StyledLink = styled(Link)`\n  ${buttonStyle}\n`;\n\nconst Button = (props) => {\n  return props.to ? (\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\n  ) : (\n    <StyledButton {...props} />\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\nimport Button from '../common/Button';\n\n/**\n * 회원가입 또는 로그인 폼을 보여줍니다.\n */\n\nconst AuthFormBlock = styled.div`\n  h3 {\n    margin: 0;\n    color: ${palette.gray[8]};\n    margin-bottom: 1rem;\n  }\n`;\n\n/**\n * 스타일링된 input\n */\nconst StyledInput = styled.input`\n  font-size: 1rem;\n  border: none;\n  border-bottom: 1px solid ${palette.gray[5]};\n  padding-bottom: 0.5rem;\n  outline: none;\n  width: 100%;\n  &:focus {\n    color: $oc-teal-7;\n    border-bottom: 1px solid ${palette.gray[7]};\n  }\n  & + & {\n    margin-top: 1rem;\n  }\n`;\n\n/**\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\n */\nconst Footer = styled.div`\n  margin-top: 2rem;\n  text-align: right;\n  a {\n    color: ${palette.gray[6]};\n    text-decoration: underline;\n    &:hover {\n      color: ${palette.gray[9]};\n    }\n  }\n`;\n\nconst ButtonWithMarginTop = styled(Button)`\n  margin-top: 1rem;\n`;\n\nconst textMap = {\n  login: '로그인',\n  register: '회원가입',\n};\n\n/**\n * 에러를 보여줍니다\n */\nconst ErrorMessage = styled.div`\n  color: red;\n  text-align: center;\n  font-size: 0.875rem;\n  margin-top: 1rem;\n`;\n\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\n  const text = textMap[type];\n  return (\n    <AuthFormBlock>\n      <h3>{text}</h3>\n      <form onSubmit={onSubmit}>\n        <StyledInput\n          autoComplete=\"username\"\n          name=\"username\"\n          placeholder=\"아이디\"\n          onChange={onChange}\n          value={form.username}\n        />\n        <StyledInput\n          autoComplete=\"new-password\"\n          name=\"password\"\n          placeholder=\"비밀번호\"\n          type=\"password\"\n          onChange={onChange}\n          value={form.password}\n        />\n        {type === 'register' && (\n          <StyledInput\n            autoComplete=\"new-password\"\n            name=\"passwordConfirm\"\n            placeholder=\"비밀번호 확인\"\n            type=\"password\"\n            onChange={onChange}\n            value={form.passwordConfirm}\n          />\n        )}\n        {error && <ErrorMessage>{error}</ErrorMessage>}\n        <ButtonWithMarginTop cyan fullWidth>\n          {text}\n        </ButtonWithMarginTop>\n      </form>\n      <Footer>\n        {type === 'login' ? (\n          <Link to=\"/register\">회원가입</Link>\n        ) : (\n          <Link to=\"/login\">로그인</Link>\n        )}\n      </Footer>\n    </AuthFormBlock>\n  );\n};\n\nexport default AuthForm;\n","import { createAction, handleActions } from 'redux-actions';\n\nconst START_LOADING = 'loading/START_LOADING';\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\n\n// 요청을 위한 액션 타입을 payload로 설정합니다. (예: “sample/GET_POST”)\n\nexport const startLoading = createAction(\n  START_LOADING,\n  (requestType) => requestType,\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING,\n  (requestType) => requestType,\n);\n\nconst initialState = {};\n\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true,\n    }),\n    [FINISH_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false,\n    }),\n  },\n  initialState,\n);\n\nexport default loading;\n","import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\n\nexport const createRequestActionTypes = (type) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function* (action) {\n    yield put(startLoading(type)); // 로딩 시작\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data,\n        meta: response,\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true,\n      });\n    }\n    yield put(finishLoading(type)); // 로딩 끝\n  };\n}\n","import axios from 'axios';\n\nconst client = axios.create();\n\n/*\n  글로벌 설정 예시:\n  \n  // API 주소를 다른 곳으로 사용함\n  client.defaults.baseURL = 'https://external-api-server.com/' \n  // 헤더 설정\n  client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\n  // 인터셉터 설정\n  axios.intercepter.response.use(\\\n    response => {\n      // 요청 성공 시 특정 작업 수행\n      return response;\n    }, \n    error => {\n      // 요청 실패 시 특정 작업 수행\n      return Promise.reject(error);\n    }\n  })  \n*/\n\nexport default client;\n","import client from './client';\n\n// 로그인\nexport const login = ({ username, password }) =>\n  client.post('/api/auth/login', { username, password });\n\n// 회원가입\nexport const register = ({ username, password }) =>\n  client.post('/api/auth/register', { username, password });\n\n// 로그인 상태 확인\nexport const check = () => client.get('/api/auth/check');\n\n// 로그아웃\nexport const logout = () => client.post('/api/auth/logout');\n","import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\n\n// 액션 타입 정의\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] =\n  createRequestActionTypes('auth/REGISTER');\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] =\n  createRequestActionTypes('auth/LOGIN');\n\n// 액션 생성\nexport const changeField = createAction(\n  CHANGE_FIELD,\n  ({ form, key, value }) => ({\n    form,\n    key,\n    value,\n  }),\n);\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form);\nexport const register = createAction(REGISTER, ({ username, password }) => ({\n  username,\n  password,\n}));\nexport const login = createAction(LOGIN, ({ username, password }) => ({\n  username,\n  password,\n}));\n\n// 사가 생성\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\n\nconst initalState = {\n  register: {\n    username: '',\n    password: '',\n    passwordContirm: '',\n  },\n  login: {\n    username: '',\n    password: '',\n  },\n  auth: null,\n  authError: null,\n};\n\nconst auth = handleActions(\n  {\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n      produce(state, (draft) => {\n        draft[form][key] = value;\n      }),\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\n      ...state,\n      [form]: initalState[form],\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\n    }),\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth,\n    }),\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth,\n    }),\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n  },\n  initalState,\n);\n\nexport default auth;\n","import { createAction, handleActions } from 'redux-actions';\nimport { call, takeLatest } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\n\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\n// 회원 정보 확인\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] =\n  createRequestActionTypes('user/CHECK');\nconst LOGOUT = 'user/LOGOUT';\n\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\nexport const check = createAction(CHECK);\nexport const logout = createAction(LOGOUT);\n\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user'); // localStorage에서 user를 제거\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\nfunction* logoutSaga() {\n  try {\n    yield call(authAPI.logout);\n    localStorage.removeItem('user');\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n  yield takeLatest(LOGOUT, logoutSaga);\n}\n\nconst initialState = {\n  user: null,\n  checkError: null,\n};\n\nexport default handleActions(\n  {\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\n      ...state,\n      user,\n    }),\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n      checkError: null,\n    }),\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      user: null,\n      checkError: error,\n    }),\n    [LOGOUT]: (state) => ({\n      ...state,\n      user: null,\n    }),\n  },\n  initialState,\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { changeField, initializeForm, login } from '../../modules/auth';\nimport { check } from '../../modules/user';\n\nconst LoginForm = (props) => {\n  const history = useHistory();\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.login,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n  const onChange = (e) => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'login',\n        key: name,\n        value,\n      }),\n    );\n  };\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { username, password } = form;\n    dispatch(login({ username, password }));\n  };\n\n  // 초기 랜더링 시 form 초기화\n  useEffect(() => {\n    dispatch(initializeForm('login'));\n  }, [dispatch]);\n\n  // 로그인 성공/실패 처리\n  useEffect(() => {\n    if (authError) {\n      console.log('오류발생');\n      console.log(authError);\n      setError('로그인 실패');\n    }\n    if (auth) {\n      console.log('로그인 성공');\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  // user 정보 확인\n  useEffect(() => {\n    if (user) {\n      history.push('/');\n    }\n    try {\n      localStorage.setItem('user', JSON.stringify(user));\n    } catch (e) {\n      console.log('localStorage is not working');\n    }\n  }, [user, history]);\n  return (\n    <AuthForm\n      type=\"login\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    />\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport LoginForm from '../container/auth/LoginForm';\n\nconst LoginPage = (props) => {\n  return (\n    <AuthTemplate>\n      <LoginForm />\n    </AuthTemplate>\n  );\n};\n\nexport default LoginPage;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ResponsiveWrapper = styled.div`\n  padding: 0 1rem;\n  width: 1024;\n  margin: 0 auto;\n\n  @media (max-width: 1024px) {\n    width: 768px;\n  }\n\n  @media (max-width: 786px) {\n    width: 100%;\n  }\n`;\n\nconst Responsive = ({ children, ...rest }) => {\n  return <ResponsiveWrapper {...rest}>{children}</ResponsiveWrapper>;\n};\n\nexport default Responsive;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport Responsive from './Responsive';\nimport Button from './Button';\n\nconst HeaderBlock = styled.div`\n  position: fixed;\n  width: 100%;\n  background: white;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\n`;\n\n/**\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\n */\nconst Wrapper = styled(Responsive)`\n  height: 4rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\n  .logo {\n    font-size: 1.125rem;\n    font-weight: 800;\n    letter-spacing: 2px;\n  }\n  .right {\n    display: flex;\n    align-items: center;\n  }\n`;\n\n/**\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\n */\nconst Spacer = styled.div`\n  height: 4rem;\n`;\n\nconst UserInfo = styled.div`\n  font-weight: 800;\n  margin-right: 1rem;\n`;\n\nconst Header = ({ user, onLogout }) => {\n  return (\n    <>\n      <HeaderBlock>\n        <Wrapper>\n          <Link to=\"/\" className=\"logo\">\n            REACTERS\n          </Link>\n          {user ? (\n            <div className=\"right\">\n              <UserInfo>{user.username}</UserInfo>\n              <Button onClick={onLogout}>로그아웃</Button>\n            </div>\n          ) : (\n            <div className=\"right\">\n              <Button to=\"/login\">로그인</Button>\n            </div>\n          )}\n        </Wrapper>\n      </HeaderBlock>\n      <Spacer />\n    </>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Header from '../../components/common/Header';\nimport { logout } from '../../modules/user';\n\nconst HeaderContainer = (props) => {\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\n  const dispatch = useDispatch();\n  const onLogout = () => {\n    dispatch(logout());\n  };\n\n  return <Header user={user} onLogout={onLogout} />;\n};\n\nexport default HeaderContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport qs from 'qs';\nimport Button from '../common/Button';\n\nconst PaginationWrapper = styled.div`\n  width: 320px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 3rem;\n`;\nconst PageNumber = styled.div``;\n\nconst buildLink = ({ username, tag, page }) => {\n  const query = qs.stringify({ tag, page });\n  return username ? `/@${username}?${query}` : `/?${query}`;\n};\n\nconst Pagination = ({ page, lastPage, username, tag }) => {\n  return (\n    <PaginationWrapper>\n      <Button\n        disabled={page === 1}\n        to={\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\n        }\n      >\n        이전\n      </Button>\n      <PageNumber>{page}</PageNumber>\n      <Button\n        disabled={page === lastPage}\n        to={\n          page === lastPage\n            ? undefined\n            : buildLink({ username, tag, page: page + 1 })\n        }\n      >\n        다음\n      </Button>\n    </PaginationWrapper>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport qs from 'qs';\nimport Pagination from '../../components/posts/Pagination';\nimport { withRouter } from 'react-router';\n\nconst PaginationContainer = ({ location }) => {\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\n    lastPage: posts.lastPage,\n    posts: posts.posts,\n    loading: loading['posts/LIST_POSTS'],\n  }));\n\n  if (!posts || loading) return null;\n\n  const {\n    tag,\n    username,\n    page = 1,\n  } = qs.parse(location.search, {\n    ignoreQueryPrefix: true,\n  });\n\n  return (\n    <Pagination\n      tag={tag}\n      username={username}\n      page={parseInt(page, 10)}\n      lastPage={lastPage}\n    />\n  );\n};\n\nexport default withRouter(PaginationContainer);\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst SubInfoWrapper = styled.div`\n  ${(props) =>\n    props.hasMarginTop &&\n    css`\n      margin-top: 1rem;\n    `}\n  color: ${palette.gray[6]};\n  /* span 사이에 가운뎃점 문자 보여주기*/\n  span + span:before {\n    color: ${palette.gray[4]};\n    padding-left: 0.25rem;\n    padding-right: 0.25rem;\n    content: '\\\\B7'; /* 가운뎃점 문자 */\n  }\n`;\n\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\n  return (\n    <SubInfoWrapper hasMarginTop={hasMarginTop}>\n      <span>\n        <b>\n          <Link to={`/@${username}`}>{username}</Link>\n        </b>\n      </span>\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\n    </SubInfoWrapper>\n  );\n};\n\nexport default SubInfo;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\nconst TagsWrapper = styled.div`\n  margin-top: 0.5rem;\n  .tag {\n    display: inline-block;\n    color: ${palette.cyan[7]};\n    text-decoration: none;\n    margin-right: 0.5rem;\n    &:hover {\n      color: ${palette.cyan[6]};\n    }\n  }\n`;\n\nconst Tags = ({ tags }) => {\n  return (\n    <TagsWrapper>\n      {tags.map((tag) => (\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\n          #{tag}\n        </Link>\n      ))}\n    </TagsWrapper>\n  );\n};\n\nexport default Tags;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Responsive from '../common/Responsive';\nimport Button from '../common/Button';\nimport palette from '../../lib/styles/palette';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport { Link } from 'react-router-dom';\n\nconst PostListBlock = styled(Responsive)`\n  margin-top: 3rem;\n`;\n\nconst WritePostButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 3rem;\n`;\n\nconst PostItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n  h2 {\n    font-size: 2rem;\n    margin-bottom: 0;\n    margin-top: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-top: 2rem;\n  }\n`;\n\nconst PostItem = ({ post }) => {\n  const { publishedDate, user, tags, title, body, _id } = post;\n  return (\n    <PostItemBlock>\n      <h2>\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\n      </h2>\n      <SubInfo\n        username={user.username}\n        publishedDate={new Date(publishedDate)}\n      />\n      <Tags tags={tags} />\n      <p>{body}</p>\n    </PostItemBlock>\n  );\n};\n\nconst PostList = ({ posts, loading, error, showWriteButton }) => {\n  // 에러 발생 시\n  if (error) {\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\n  }\n\n  return (\n    <PostListBlock>\n      <WritePostButtonWrapper>\n        {showWriteButton && (\n          <Button cyan to=\"/write\">\n            새 글 작성하기\n          </Button>\n        )}\n      </WritePostButtonWrapper>\n      {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\n      {!loading && posts && (\n        <div>\n          {posts.map((post) => (\n            <PostItem post={post} key={post._id} />\n          ))}\n        </div>\n      )}\n    </PostListBlock>\n  );\n};\n\nexport default PostList;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [LIST_POSTS, LIST_POSTS_SUCCESS, LIST_POSTS_FAILURE] =\n  createRequestActionTypes('posts/LIST_POSTS');\n\nexport const listPosts = createAction(\n  LIST_POSTS,\n  ({ tag, username, page }) => ({ tag, username, page }),\n);\n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\n\nconst initialState = {\n  posts: null,\n  error: null,\n  lastPage: 1,\n};\n\nconst posts = handleActions(\n  {\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers['last-page'], 10),\n    }),\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n  },\n  initialState,\n);\n\nexport default posts;\n","import qs from 'qs';\nimport client from './client';\n\nexport const writePost = ({ title, body, tags }) =>\n  client.post('/api/posts', { title, body, tags });\n\nexport const readPost = (id) => client.get(`/api/posts/${id}`);\n\nexport const listPosts = ({ page, username, tag }) => {\n  const queryString = qs.stringify({\n    page,\n    username,\n    tag,\n  });\n  return client.get(`/api/posts?${queryString}`);\n};\n\nexport const updatePost = ({ id, title, body, tags }) =>\n  client.patch(`/api/posts/${id}`, {\n    title,\n    body,\n    tags,\n  });\n\nexport const removePost = (id) => client.delete(`/api/posts/${id}`);\n","import React, { useEffect } from 'react';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostList from '../../components/posts/PostList';\nimport { listPosts } from '../../modules/posts';\n\nconst PostListContainer = ({ location }) => {\n  const dispatch = useDispatch();\n  const { posts, error, loading, user } = useSelector(\n    ({ posts, loading, user }) => ({\n      posts: posts.posts,\n      error: posts.error,\n      loading: loading['posts/LIST_POSTS'],\n      user: user.user,\n    }),\n  );\n  useEffect(() => {\n    const { tag, username, page } = qs.parse(location.search, {\n      ignoreQueryPrefix: true,\n    });\n    dispatch(listPosts({ tag, username, page }));\n  }, [dispatch, location.search]);\n\n  return (\n    <PostList\n      loading={loading}\n      error={error}\n      posts={posts}\n      showWriteButton={user}\n    />\n  );\n};\n\nexport default withRouter(PostListContainer);\n","import React from 'react';\nimport HeaderContainer from '../container/common/HeaderContainer';\nimport PaginationContainer from '../container/posts/PaginationContainer';\nimport PostListContainer from '../container/posts/PostListContainer';\n\nconst PostListPage = (props) => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostListContainer />\n      <PaginationContainer />\n    </>\n  );\n};\n\nexport default PostListPage;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [READ_POST, READ_POST_SUCCESS, READ_POST_FAILURE] =\n  createRequestActionTypes('post/READ_POST');\nconst UNLOAD_POST = 'post/UNLOAD_POST';\n\nexport const readPost = createAction(READ_POST, (id) => id);\nexport const unloadPost = createAction(UNLOAD_POST);\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n}\n\nconst initailState = {\n  post: null,\n  error: null,\n};\n\nexport default handleActions(\n  {\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    // 남아있는 포스트를 제거함으로써 깜박임 현상 제거\n    [UNLOAD_POST]: () => initailState,\n  },\n  initailState,\n);\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\n\n/**\n * 포스트 읽기를 담당하는 컴포넌트입니다.\n */\n\nconst PostViewerWrapper = styled(Responsive)`\n  margin-top: 4rem;\n`;\n\nconst PostHead = styled.div`\n  border-bottom: 1px solid ${palette.gray[2]};\n  padding-bottom: 3rem;\n  margin-bottom: 3rem;\n  h1 {\n    font-size: 3rem;\n    line-height: 1.5;\n    margin: 0;\n  }\n`;\n\nconst PostContent = styled.div`\n  font-size: 1.3125rem;\n  color: ${palette.gray[8]};\n`;\n\nconst PostViewer = ({ post, error, loading, actionButtons }) => {\n  if (error) {\n    if (error.response && error.reponse.status === 404) {\n      return <PostViewerWrapper>존재하지 않는 포스트입니다.</PostViewerWrapper>;\n    }\n    return <PostViewerWrapper>오류 발생!</PostViewerWrapper>;\n  }\n\n  if (loading || !post) {\n    return null;\n  }\n\n  const { title, body, user, publishedDate, tags } = post;\n\n  return (\n    <PostViewerWrapper>\n      <PostHead>\n        <h1>{title}</h1>\n        <SubInfo\n          username={user.username}\n          publishedDate={publishedDate}\n          hasMarginTop\n        />\n        <Tags tags={tags} />\n      </PostHead>\n      {actionButtons}\n      <PostContent dangerouslySetInnerHTML={{ __html: body }} />\n    </PostViewerWrapper>\n  );\n};\n\nexport default PostViewer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './Button';\n\nconst Fullscreen = styled.div`\n  position: fixed;\n  z-index: 30;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.25);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst AskModalBlock = styled.div`\n  width: 320px;\n  background: white;\n  padding: 1.5rem;\n  border-radius: 4px;\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\n  h2 {\n    margin-top: 0;\n    margin-bottom: 1rem;\n  }\n  p {\n    margin-bottom: 3rem;\n  }\n  .buttons {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  height: 2rem;\n  & + & {\n    margin-left: 0.75rem;\n  }\n`;\n\nconst AskModal = ({\n  visible,\n  title,\n  description,\n  confirmText = '확인',\n  cancelText = '취소',\n  onConfirm,\n  onCancel,\n}) => {\n  if (!visible) return null;\n  return (\n    <Fullscreen>\n      <AskModalBlock>\n        <h2>{title}</h2>\n        <p>{description}</p>\n        <div className=\"buttons\">\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\n          <StyledButton cyan onClick={onConfirm}>\n            {confirmText}\n          </StyledButton>\n        </div>\n      </AskModalBlock>\n    </Fullscreen>\n  );\n};\n\nexport default AskModal;\n","import React from 'react';\nimport AskModal from '../common/AskModal';\n\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\n  return (\n    <AskModal\n      visible={visible}\n      title=\"포스트 삭제\"\n      description=\"포스트를 정말 삭제하시겠습니까?\"\n      confirmText=\"삭제\"\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n    />\n  );\n};\n\nexport default AskRemoveModal;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport AskRemoveModal from './AskRemoveModal';\n\nconst PostActionButtonsWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 2rem;\n  margin-top: -1.5rem;\n`;\n\nconst ActionButton = styled.button`\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palette.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n  &:hover {\n    background: ${palette.gray[1]};\n    color: ${palette.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n  }\n`;\n\nconst PostActionButtons = ({ onEdit, onRemove }) => {\n  const [modal, setModal] = useState(false);\n  const onRemoveClick = () => {\n    setModal(true);\n  };\n  const onCancel = () => {\n    setModal(false);\n  };\n  const onConfirm = () => {\n    setModal(false);\n    onRemove();\n  };\n\n  return (\n    <>\n      <PostActionButtonsWrapper>\n        <ActionButton onClick={onEdit}>수정</ActionButton>\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\n      </PostActionButtonsWrapper>\n      <AskRemoveModal\n        visible={modal}\n        onConfirm={onConfirm}\n        onCancel={onCancel}\n      />\n    </>\n  );\n};\n\nexport default PostActionButtons;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] =\n  createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nconst [UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] =\n  createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\n  title,\n  body,\n  tags,\n}));\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, (post) => post);\nexport const updatePost = createAction(\n  UPDATE_POST,\n  ({ id, title, body, tags }) => ({\n    id,\n    title,\n    body,\n    tags,\n  }),\n);\n\n// saga 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\n\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_POST]: (state) => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\n      ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState,\n);\n\nexport default write;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nimport { removePost } from '../../lib/api/posts';\n\nconst PostViewerContainer = ({ match, history }) => {\n  // 처음 마운트될 때 포스트 읽기 API 요청\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n  const { post, error, loading, user } = useSelector(\n    ({ post, loading, user }) => ({\n      post: post.post,\n      error: post.error,\n      loading: loading['post/READ_POST'],\n      user: user.user,\n    }),\n  );\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/'); // 홈으로 이동\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const ownPost = (user && user._id) === (post && post.user._id);\n\n  return (\n    <PostViewer\n      post={post}\n      loading={loading}\n      error={error}\n      actionButtons={\n        ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\n      }\n    />\n  );\n};\n\nexport default withRouter(PostViewerContainer);\n","import React from 'react';\nimport HeaderContainer from '../container/common/HeaderContainer';\nimport PostViewerContainer from '../container/post/PostViewContainer';\n\nconst PostPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostViewerContainer />\n    </>\n  );\n};\n\nexport default PostPage;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport { check } from '../../modules/user';\n\nconst RegisterForm = (props) => {\n  const history = useHistory();\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n  const onChange = (e) => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'register',\n        key: name,\n        value,\n      }),\n    );\n  };\n\n  // 등록 처리\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { username, password, passwordConfirm } = form;\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요');\n      return;\n    }\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      changeField({ form: 'register', key: 'password', value: '' });\n      changeField({ form: 'register', key: 'passwordConfirm', value: '' });\n      return;\n    }\n    dispatch(register({ username, password }));\n  };\n\n  //초기 랜더링 시 form 초기화\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n\n  // 회원가입 성공/실패 처리\n  useEffect(() => {\n    if (authError) {\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      }\n      setError('회원가입 실패');\n      return;\n    }\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  // user 정보 확인\n  useEffect(() => {\n    if (user) {\n      history.push('/');\n    }\n    try {\n      localStorage.setItem('user', JSON.stringify(user));\n    } catch (e) {\n      console.log('localStorage is not working');\n    }\n  }, [user, history]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    />\n  );\n};\n\nexport default RegisterForm;\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport RegisterForm from '../container/auth/RegisterForm';\n\nconst RegisterPage = (props) => {\n  return (\n    <AuthTemplate>\n      <RegisterForm />\n    </AuthTemplate>\n  );\n};\n\nexport default RegisterPage;\n","import React, { useRef, useEffect } from 'react';\nimport Quill from 'quill';\nimport 'quill/dist/quill.bubble.css';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\n\nconst EditorWrapper = styled(Responsive)`\n  padding: 5rem 0;\n`;\nconst TitleInput = styled.input`\n  font-size: 3rem;\n  outline: none;\n  padding-bottom: 0.5rem;\n  border: none;\n  border-bottom: 1px solid ${palette.gray[4]};\n  margin-bottom: 2rem;\n  width: 100%;\n`;\nconst QuillWrapper = styled.div`\n  /* 최소 크기 지정 및 padding 제거 */\n  .ql-editor {\n    padding: 0;\n    min-height: 320px;\n    font-size: 1.125rem;\n    line-height: 1.5;\n  }\n  .ql-editor.ql-blank::before {\n    left: 0px;\n  }\n`;\n\nconst Editor = ({ title, body, onChangeField }) => {\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\n\n  useEffect(() => {\n    quillInstance.current = new Quill(quillElement.current, {\n      theme: 'bubble',\n      placeholder: '내용을 작성하세요...',\n      modules: {\n        // 더 많은 옵션\n        // https://quilljs.com/docs/modules/toolbar/ 참고\n        toolbar: [\n          [{ header: '1' }, { header: '2' }],\n          ['bold', 'italic', 'underline', 'strike'],\n          [{ list: 'ordered' }, { list: 'bullet' }],\n          ['blockquote', 'code-block', 'link', 'image'],\n        ],\n      },\n    });\n\n    // quill에 text-change 이벤트 핸들러 등록\n    // 참고: https://quilljs.com/docs/api/#events\n    const quill = quillInstance.current;\n    quill.on('text-change', (delta, oldDelta, source) => {\n      if (source === 'user') {\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\n      }\n    });\n  }, [onChangeField]);\n\n  useEffect(() => {\n    quillInstance.current.root.innerHTML = body;\n  }, []);\n\n  const onChangeTitle = (e) => {\n    onChangeField({ key: 'title', value: e.target.value });\n  };\n\n  return (\n    <EditorWrapper>\n      <TitleInput\n        placeholder=\"제목을 입력하세요\"\n        onChange={onChangeTitle}\n        value={title}\n      />\n      <QuillWrapper>\n        <div ref={quillElement} />\n      </QuillWrapper>\n    </EditorWrapper>\n  );\n};\n\nexport default Editor;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Editor from '../../components/write/Editor';\nimport { changeField, initialize } from '../../modules/write';\n\nconst EditorContainer = (props) => {\n  const dispath = useDispatch();\n  const { title, body } = useSelector(({ write }) => ({\n    title: write.title,\n    body: write.body,\n  }));\n\n  const onChangeField = useCallback(\n    (payload) => dispath(changeField(payload)),\n    [dispath],\n  );\n\n  useEffect(() => {\n    return () => {\n      dispath(initialize());\n    };\n  }, [dispath]);\n\n  return <Editor onChangeField={onChangeField} title={title} body={body} />;\n};\n\nexport default EditorContainer;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\n/**\n * 태크 추가를 담당하는 컴포넌트입니다.\n */\n\nconst TagBoxWrapper = styled.div`\n  width: 100%;\n  border-top: 1px solid ${palette.gray[2]};\n  padding-top: 2rem;\n\n  h4 {\n    color: ${palette.gray[8]};\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst TagForm = styled.form`\n  border-radius: 4px;\n  overflow: hidden;\n  display: flex;\n  width: 256px;\n  border: 1px solid ${palette.gray[9]};\n  input,\n  button {\n    outline: none;\n    border: none;\n    font-size: 1rem;\n  }\n\n  input {\n    padding: 0.5rem;\n    flex: 1;\n  }\n\n  button {\n    cursor: pointer;\n    padding: 0 1rem;\n    border: none;\n    background: ${palette.gray[8]};\n    color: white;\n    font-weight: bold;\n    &:hover {\n      background: ${palette.gray[6]};\n    }\n  }\n`;\n\nconst Tag = styled.div`\n  margin-right: 0.5rem;\n  color: ${palette.gray[6]};\n  cursor: pointer;\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nconst TagListWrapper = styled.div`\n  display: flex;\n  margin-top: 0.5rem;\n`;\n\nconst TagItem = React.memo(({ tag, onRemove }) => (\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\n));\n\nconst TagList = React.memo(({ tags, onRemove }) => (\n  <TagListWrapper>\n    {tags.map((tag) => (\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\n    ))}\n  </TagListWrapper>\n));\n\nconst TagBox = ({ tags, onChangeTags }) => {\n  const [input, setInput] = useState('');\n  const [localTags, setLocalTags] = useState([]);\n\n  const insertTag = useCallback(\n    (tag) => {\n      if (!tag) return;\n      if (localTags.includes(tag)) return;\n      const nextTags = [...localTags, tag];\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onRemove = useCallback(\n    (tag) => {\n      const nextTags = localTags.filter((t) => t !== tag);\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onChange = useCallback((e) => {\n    setInput(e.target.value);\n  }, []);\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n      insertTag(input.trim());\n      setInput('');\n    },\n    [input, insertTag],\n  );\n\n  useEffect(() => {\n    setLocalTags(tags);\n  }, [tags]);\n\n  return (\n    <TagBoxWrapper>\n      <TagForm onSubmit={onSubmit}>\n        <input\n          placeholder=\"태그를 입력하세요\"\n          value={input}\n          onChange={onChange}\n        />\n        <button type=\"submit\">추가</button>\n      </TagForm>\n      <TagList tags={localTags} onRemove={onRemove} />\n    </TagBoxWrapper>\n  );\n};\n\nexport default TagBox;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TagBox from '../../components/write/TagBox';\nimport { changeField } from '../../modules/write';\n\nconst TagBoxContainer = (props) => {\n  const dispatch = useDispatch();\n  const tags = useSelector((state) => state.write.tags);\n\n  const onChangeTags = (nextTags) => {\n    dispatch(\n      changeField({\n        key: 'tags',\n        value: nextTags,\n      }),\n    );\n  };\n\n  return <TagBox onChangeTags={onChangeTags} tags={tags} />;\n};\n\nexport default TagBoxContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/Button';\n\n/**\n * 포스트 작성 및 취소를 담당하는 컴포넌트입니다.\n */\n\nconst WriteActionButtonsWrapper = styled.div`\n  margin-top: 1rem;\n  margin-bottom: 3rem;\n  button + button {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  height: 2.125rem;\n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {\n  return (\n    <WriteActionButtonsWrapper>\n      <StyledButton cyan onClick={onPublish}>\n        포스트 {isEdit ? '수정' : '등록'}\n      </StyledButton>\n      <StyledButton onClick={onCancel}>취소</StyledButton>\n    </WriteActionButtonsWrapper>\n  );\n};\n\nexport default WriteActionButtons;\n","import React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { updatePost, writePost } from '../../modules/write';\n\nconst WriteActionButtonsContainer = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\n    ({ write }) => ({\n      title: write.title,\n      body: write.body,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId,\n    }),\n  );\n\n  // 포스트 등록\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\n      return;\n    }\n    dispatch(\n      writePost({\n        title,\n        body,\n        tags,\n      }),\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패시 할 작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user } = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return (\n    <WriteActionButtons\n      onPublish={onPublish}\n      onCancel={onCancel}\n      isEdit={originalPostId}\n    />\n  );\n};\n\nexport default WriteActionButtonsContainer;\n","import React from 'react';\nimport Responsive from '../components/common/Responsive';\nimport EditorContainer from '../container/write/EditorContainer';\nimport TagBoxContainer from '../container/write/TagBoxContainer';\nimport WriteActionButtonsContainer from '../container/write/WriteActionButtonsContainer';\n\nconst WritePage = (props) => {\n  return (\n    <Responsive>\n      <EditorContainer />\n      <TagBoxContainer />\n      <WriteActionButtonsContainer />\n    </Responsive>\n  );\n};\n\nexport default WritePage;\n","import { Route } from 'react-router';\nimport './App.css';\nimport LoginPage from './pages/LoginPage';\nimport PostListPage from './pages/PostListPage';\nimport PostPage from './pages/PostPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\n\nfunction App() {\n  return (\n    <>\n      <Route path={['/@:username', '/']} exact component={PostListPage} />\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/register\" component={RegisterPage} />\n      <Route path=\"/write\" component={WritePage} />\n      <Route path=\"/@:username/:postId\" component={PostPage} />\n    </>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport auth, { authSaga } from './auth';\nimport loading from './loading';\nimport user, { userSaga } from './user';\nimport write, { writeSaga } from './write';\nimport post, { postSaga } from './post';\nimport posts, { postsSaga } from './posts';\nimport { all } from 'redux-saga/effects';\n\nconst rootReducer = combineReducers({\n  auth,\n  loading,\n  user,\n  write,\n  post,\n  posts,\n});\n\nexport function* rootSaga() {\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\n}\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport rootReducer, { rootSaga } from './modules';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { check, tempSetUser } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    if (!user) return; // 로그인 상태가 아니라면 아무것도 안함\n\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}